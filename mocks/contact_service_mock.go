// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/nubank-challenge/models"
	mock "github.com/stretchr/testify/mock"
)

// ContactServiceMock is an autogenerated mock type for the ContactService type
type ContactServiceMock struct {
	mock.Mock
}

type ContactServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ContactServiceMock) EXPECT() *ContactServiceMock_Expecter {
	return &ContactServiceMock_Expecter{mock: &_m.Mock}
}

// CreateContact provides a mock function with given fields: ctx, phone, email, clientId
func (_m *ContactServiceMock) CreateContact(ctx context.Context, phone string, email string, clientId string) (*models.ContactResponse, error) {
	ret := _m.Called(ctx, phone, email, clientId)

	if len(ret) == 0 {
		panic("no return value specified for CreateContact")
	}

	var r0 *models.ContactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*models.ContactResponse, error)); ok {
		return rf(ctx, phone, email, clientId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.ContactResponse); ok {
		r0 = rf(ctx, phone, email, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ContactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, phone, email, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContactServiceMock_CreateContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContact'
type ContactServiceMock_CreateContact_Call struct {
	*mock.Call
}

// CreateContact is a helper method to define mock.On call
//   - ctx context.Context
//   - phone string
//   - email string
//   - clientId string
func (_e *ContactServiceMock_Expecter) CreateContact(ctx interface{}, phone interface{}, email interface{}, clientId interface{}) *ContactServiceMock_CreateContact_Call {
	return &ContactServiceMock_CreateContact_Call{Call: _e.mock.On("CreateContact", ctx, phone, email, clientId)}
}

func (_c *ContactServiceMock_CreateContact_Call) Run(run func(ctx context.Context, phone string, email string, clientId string)) *ContactServiceMock_CreateContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ContactServiceMock_CreateContact_Call) Return(_a0 *models.ContactResponse, _a1 error) *ContactServiceMock_CreateContact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContactServiceMock_CreateContact_Call) RunAndReturn(run func(context.Context, string, string, string) (*models.ContactResponse, error)) *ContactServiceMock_CreateContact_Call {
	_c.Call.Return(run)
	return _c
}

// NewContactServiceMock creates a new instance of ContactServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContactServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContactServiceMock {
	mock := &ContactServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
