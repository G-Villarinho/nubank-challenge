// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/nubank-challenge/models"
	mock "github.com/stretchr/testify/mock"
)

// ContactRepositoryMock is an autogenerated mock type for the ContactRepository type
type ContactRepositoryMock struct {
	mock.Mock
}

type ContactRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ContactRepositoryMock) EXPECT() *ContactRepositoryMock_Expecter {
	return &ContactRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateContact provides a mock function with given fields: ctx, contact
func (_m *ContactRepositoryMock) CreateContact(ctx context.Context, contact *models.Contact) error {
	ret := _m.Called(ctx, contact)

	if len(ret) == 0 {
		panic("no return value specified for CreateContact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Contact) error); ok {
		r0 = rf(ctx, contact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContactRepositoryMock_CreateContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContact'
type ContactRepositoryMock_CreateContact_Call struct {
	*mock.Call
}

// CreateContact is a helper method to define mock.On call
//   - ctx context.Context
//   - contact *models.Contact
func (_e *ContactRepositoryMock_Expecter) CreateContact(ctx interface{}, contact interface{}) *ContactRepositoryMock_CreateContact_Call {
	return &ContactRepositoryMock_CreateContact_Call{Call: _e.mock.On("CreateContact", ctx, contact)}
}

func (_c *ContactRepositoryMock_CreateContact_Call) Run(run func(ctx context.Context, contact *models.Contact)) *ContactRepositoryMock_CreateContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Contact))
	})
	return _c
}

func (_c *ContactRepositoryMock_CreateContact_Call) Return(_a0 error) *ContactRepositoryMock_CreateContact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContactRepositoryMock_CreateContact_Call) RunAndReturn(run func(context.Context, *models.Contact) error) *ContactRepositoryMock_CreateContact_Call {
	_c.Call.Return(run)
	return _c
}

// CreateContacts provides a mock function with given fields: ctx, contacts
func (_m *ContactRepositoryMock) CreateContacts(ctx context.Context, contacts []*models.Contact) error {
	ret := _m.Called(ctx, contacts)

	if len(ret) == 0 {
		panic("no return value specified for CreateContacts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.Contact) error); ok {
		r0 = rf(ctx, contacts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContactRepositoryMock_CreateContacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContacts'
type ContactRepositoryMock_CreateContacts_Call struct {
	*mock.Call
}

// CreateContacts is a helper method to define mock.On call
//   - ctx context.Context
//   - contacts []*models.Contact
func (_e *ContactRepositoryMock_Expecter) CreateContacts(ctx interface{}, contacts interface{}) *ContactRepositoryMock_CreateContacts_Call {
	return &ContactRepositoryMock_CreateContacts_Call{Call: _e.mock.On("CreateContacts", ctx, contacts)}
}

func (_c *ContactRepositoryMock_CreateContacts_Call) Run(run func(ctx context.Context, contacts []*models.Contact)) *ContactRepositoryMock_CreateContacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*models.Contact))
	})
	return _c
}

func (_c *ContactRepositoryMock_CreateContacts_Call) Return(_a0 error) *ContactRepositoryMock_CreateContacts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContactRepositoryMock_CreateContacts_Call) RunAndReturn(run func(context.Context, []*models.Contact) error) *ContactRepositoryMock_CreateContacts_Call {
	_c.Call.Return(run)
	return _c
}

// GetContactsByClientID provides a mock function with given fields: ctx, clientID
func (_m *ContactRepositoryMock) GetContactsByClientID(ctx context.Context, clientID string) ([]*models.Contact, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetContactsByClientID")
	}

	var r0 []*models.Contact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Contact, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Contact); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContactRepositoryMock_GetContactsByClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContactsByClientID'
type ContactRepositoryMock_GetContactsByClientID_Call struct {
	*mock.Call
}

// GetContactsByClientID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *ContactRepositoryMock_Expecter) GetContactsByClientID(ctx interface{}, clientID interface{}) *ContactRepositoryMock_GetContactsByClientID_Call {
	return &ContactRepositoryMock_GetContactsByClientID_Call{Call: _e.mock.On("GetContactsByClientID", ctx, clientID)}
}

func (_c *ContactRepositoryMock_GetContactsByClientID_Call) Run(run func(ctx context.Context, clientID string)) *ContactRepositoryMock_GetContactsByClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ContactRepositoryMock_GetContactsByClientID_Call) Return(_a0 []*models.Contact, _a1 error) *ContactRepositoryMock_GetContactsByClientID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContactRepositoryMock_GetContactsByClientID_Call) RunAndReturn(run func(context.Context, string) ([]*models.Contact, error)) *ContactRepositoryMock_GetContactsByClientID_Call {
	_c.Call.Return(run)
	return _c
}

// NewContactRepositoryMock creates a new instance of ContactRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContactRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContactRepositoryMock {
	mock := &ContactRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
