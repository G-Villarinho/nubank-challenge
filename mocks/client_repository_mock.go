// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/nubank-challenge/models"
	mock "github.com/stretchr/testify/mock"
)

// ClientRepositoryMock is an autogenerated mock type for the ClientRepository type
type ClientRepositoryMock struct {
	mock.Mock
}

type ClientRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientRepositoryMock) EXPECT() *ClientRepositoryMock_Expecter {
	return &ClientRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateClient provides a mock function with given fields: ctx, client
func (_m *ClientRepositoryMock) CreateClient(ctx context.Context, client *models.Client) error {
	ret := _m.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Client) error); ok {
		r0 = rf(ctx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientRepositoryMock_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type ClientRepositoryMock_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - client *models.Client
func (_e *ClientRepositoryMock_Expecter) CreateClient(ctx interface{}, client interface{}) *ClientRepositoryMock_CreateClient_Call {
	return &ClientRepositoryMock_CreateClient_Call{Call: _e.mock.On("CreateClient", ctx, client)}
}

func (_c *ClientRepositoryMock_CreateClient_Call) Run(run func(ctx context.Context, client *models.Client)) *ClientRepositoryMock_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Client))
	})
	return _c
}

func (_c *ClientRepositoryMock_CreateClient_Call) Return(_a0 error) *ClientRepositoryMock_CreateClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientRepositoryMock_CreateClient_Call) RunAndReturn(run func(context.Context, *models.Client) error) *ClientRepositoryMock_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientByID provides a mock function with given fields: ctx, id
func (_m *ClientRepositoryMock) GetClientByID(ctx context.Context, id string) (*models.Client, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByID")
	}

	var r0 *models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Client, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Client); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientRepositoryMock_GetClientByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientByID'
type ClientRepositoryMock_GetClientByID_Call struct {
	*mock.Call
}

// GetClientByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientRepositoryMock_Expecter) GetClientByID(ctx interface{}, id interface{}) *ClientRepositoryMock_GetClientByID_Call {
	return &ClientRepositoryMock_GetClientByID_Call{Call: _e.mock.On("GetClientByID", ctx, id)}
}

func (_c *ClientRepositoryMock_GetClientByID_Call) Run(run func(ctx context.Context, id string)) *ClientRepositoryMock_GetClientByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientRepositoryMock_GetClientByID_Call) Return(_a0 *models.Client, _a1 error) *ClientRepositoryMock_GetClientByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientRepositoryMock_GetClientByID_Call) RunAndReturn(run func(context.Context, string) (*models.Client, error)) *ClientRepositoryMock_GetClientByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientWitContactsByID provides a mock function with given fields: ctx, id
func (_m *ClientRepositoryMock) GetClientWitContactsByID(ctx context.Context, id string) (*models.Client, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetClientWitContactsByID")
	}

	var r0 *models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Client, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Client); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientRepositoryMock_GetClientWitContactsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientWitContactsByID'
type ClientRepositoryMock_GetClientWitContactsByID_Call struct {
	*mock.Call
}

// GetClientWitContactsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ClientRepositoryMock_Expecter) GetClientWitContactsByID(ctx interface{}, id interface{}) *ClientRepositoryMock_GetClientWitContactsByID_Call {
	return &ClientRepositoryMock_GetClientWitContactsByID_Call{Call: _e.mock.On("GetClientWitContactsByID", ctx, id)}
}

func (_c *ClientRepositoryMock_GetClientWitContactsByID_Call) Run(run func(ctx context.Context, id string)) *ClientRepositoryMock_GetClientWitContactsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ClientRepositoryMock_GetClientWitContactsByID_Call) Return(_a0 *models.Client, _a1 error) *ClientRepositoryMock_GetClientWitContactsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientRepositoryMock_GetClientWitContactsByID_Call) RunAndReturn(run func(context.Context, string) (*models.Client, error)) *ClientRepositoryMock_GetClientWitContactsByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientsWithContact provides a mock function with given fields: ctx
func (_m *ClientRepositoryMock) GetClientsWithContact(ctx context.Context) ([]*models.Client, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClientsWithContact")
	}

	var r0 []*models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Client, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientRepositoryMock_GetClientsWithContact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientsWithContact'
type ClientRepositoryMock_GetClientsWithContact_Call struct {
	*mock.Call
}

// GetClientsWithContact is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClientRepositoryMock_Expecter) GetClientsWithContact(ctx interface{}) *ClientRepositoryMock_GetClientsWithContact_Call {
	return &ClientRepositoryMock_GetClientsWithContact_Call{Call: _e.mock.On("GetClientsWithContact", ctx)}
}

func (_c *ClientRepositoryMock_GetClientsWithContact_Call) Run(run func(ctx context.Context)) *ClientRepositoryMock_GetClientsWithContact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClientRepositoryMock_GetClientsWithContact_Call) Return(_a0 []*models.Client, _a1 error) *ClientRepositoryMock_GetClientsWithContact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientRepositoryMock_GetClientsWithContact_Call) RunAndReturn(run func(context.Context) ([]*models.Client, error)) *ClientRepositoryMock_GetClientsWithContact_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientRepositoryMock creates a new instance of ClientRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientRepositoryMock {
	mock := &ClientRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
